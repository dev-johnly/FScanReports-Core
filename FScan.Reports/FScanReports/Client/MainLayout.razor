@using System.IdentityModel.Tokens.Jwt
@using Blazored.LocalStorage
@using FScanReports.Client.States
@using System.Net.Http.Headers
@using System.Security.Claims
@inject ILocalStorageService localStorageService
@inject HttpClient Http
@inherits LayoutComponentBase

<BlazoredToasts Position="ToastPosition.BottomRight"
                Timeout="5"
                ShowProgressBar="true" />

<AuthorizeView>
    <Authorized>
        <Sidebar />
    </Authorized>
</AuthorizeView>


<div class="nk-wrap">

    <AuthorizeView>
        <Authorized>
            <div class="nk-header nk-header-fixed is-light" style="height:65px;">
                <div class="container-fluid">
                    <div class="nk-header-wrap">
                        <div class="nk-menu-trigger d-xl-none ms-n1">
                            <a href="#" class="nk-nav-toggle nk-quick-nav-icon" data-bs-toggle="collapse" data-bs-target="#sidebarMenu"><em class="icon ni ni-menu"></em></a>
                            @*  <a href="#" class="nk-nav-toggle nk-quick-nav-icon" data-target="sidebarMenu"><em class="icon ni ni-menu"></em></a> *@
                        </div>
                        <div class="nk-header-brand d-xl-none">
                            <a href="html/index.html" class="logo-link">
                                @*   <img class="logo-light logo-img" src="src/images/logo.png" srcset="./images/logo2x.png 2x" alt="logo">
                                <img class="logo-dark logo-img" src="src/images/logo-dark.png" srcset="./images/logo-dark2x.png 2x" alt="logo-dark"> *@
                            </a>
                        </div><!-- .nk-header-brand -->

                        <div class="nk-header-tools">
                            <ul class="nk-quick-nav">


                                <li class="dropdown user-dropdown">
                                    <a href="#" class="dropdown-toggle" data-bs-toggle="dropdown">
                                        <div class="user-toggle">
                                            <div class="user-avatar sm">
                                                <em class="icon ni ni-user-alt"></em>
                                            </div>
                                            <div class="user-info d-none d-md-block">
                                                @Role
                                                <div class="user-name dropdown-indicator">
                                                    @Name
                                                </div>
                                            </div>
                                        </div>
                                    </a>
                                    <div class="dropdown-menu dropdown-menu-md dropdown-menu-end dropdown-menu-s1">
                                        <div class="dropdown-inner user-card-wrap bg-lighter d-none d-md-block">
                                            <div class="user-card">
                                                <div class="user-avatar sm">
                                                    <em class="icon ni ni-user-alt"></em>
                                                </div>
                                                <div class="user-info">

                                                    <span class="lead-text">
                                                        @context.User.Identity!.Name

                                                    </span>

                                                    <span class="sub-text">
                                                        @context.User.Claims.FirstOrDefault(x => x.Type == ClaimTypes.Email)!.Value
                                                    </span>


                                                </div>
                                            </div>
                                        </div>
                                        <div class="dropdown-inner">
                                            <ul class="link-list">
                                                @if (Role == "Administrator")
                                                {
                                                    <li><a href="ResetPassword"><em class="icon ni ni-user-alt"></em><span>Reset Password</span></a></li>

                                                }
                                                <li><a href="ChangePassword"><em class="icon ni ni-setting-alt"></em><span>Change Password</span></a></li>
                                            </ul>
                                        </div>
                                        <div class="dropdown-inner">
                                            <ul class="link-list">
                                                <li><a href="logout"><em class="icon ni ni-signout"></em><span>Sign out</span></a></li>
                                            </ul>
                                        </div>
                                    </div>
                                </li>

                            </ul>
                        </div>
                    </div>
                </div>
            </div>

        </Authorized>
    </AuthorizeView>

    <div class="nk-content ">
        <div class="container-fluid">
            <div class="nk-content-inner">
                <div class="nk-content-body">

                    @Body


                </div>
            </div>
        </div>

    </div>
    <Footer />
</div>




@code {
    private string Name = string.Empty;
    private string Role = string.Empty;
    private string Email = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var token = await localStorageService.GetItemAsStringAsync("auth");

        if (!string.IsNullOrEmpty(token))
        {
            var handler = new JwtSecurityTokenHandler();
            var jwtToken = handler.ReadJwtToken(token);

            Name = jwtToken.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)?.Value ?? string.Empty;
            Role = jwtToken.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value ?? string.Empty;
            Email = jwtToken.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value ?? string.Empty;

            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        }
    }
}