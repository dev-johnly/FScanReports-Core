@page "/AttendanceReport"
@using FScan.Reports.Application.Models.Requests
@using FScan.Reports.Application.Models.Responses
@inject IJSRuntime JSRuntime

<div class="nk-block">
    <div class="row g-gs">
        <div class="col-xxl-12">
            <div class="card card-bordered card-full">
                <div class="card-inner">
                    <div class="card-title-group">
                        <div class="card-title">
                           
                            <h5 class="title">Attendance Report</h5>
                        </div>

                    </div>
                    <EditForm Model="@model" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <div class="row">
                            <div class="col-8 offset-2">

                                <div class="form-group">
                                    <div class="form-control-wrap">
                                        <div class="input-daterange date-picker-range input-group">
                                            <InputDate @bind-Value="@model.DateFrom" class="form-control" />
                                            <ValidationMessage For="@(() => model.DateFrom)" />
                                            <div class="input-group-addon">TO</div>
                                            <InputDate @bind-Value="@model.DateTo" class="form-control" />
                                            <ValidationMessage For="@(() => model.DateTo)" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="mt-3">
                            <div class="col-8 offset-2">
                                <div class="form-group">

                                    <button class="btn btn-primary" @onclick="DateFilterAsync">Submit</button>
                                    <button class="btn btn-outline-secondary" @onclick="ExportToPDF">Generate Report</button>
                                </div>
                            </div>
                        </div>
                    </EditForm>


                </div>
                <div class="card-inner">
                    <div class="row">

                        <table class="table table-striped table-bordered">
                            <caption>Attendance and Lunch Break Report</caption>
                            <thead>
                                <tr class="text-center">
                                    <th></th>
                                    <th colspan="3" class="text-center">ATTENDANCE</th>
                                    <th colspan="3" class="text-center">LUNCH BREAK</th>
                                </tr>
                                <tr class="text-center">
                                    <th>DATE</th>
                                    <th>TIME IN</th>
                                    <th>TIME OUT</th>
                                    <th>TOTAL HRS</th>
                                    <th>TIME START</th>
                                    <th>TIME END</th>
                                    <th>TOTAL HRS</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (model.AttendanceList != null)
                                {
                                    @foreach (var item in model.AttendanceList)
                                    {
                                        <tr class="text-center">
                                            <td>@item.AttendanceDateText</td>
                                            <td>@item.TimeInText</td>
                                            <td>@item.TimeOutText</td>
                                            <td>@item.TotalTime</td>
                                            <td>@item.LunchOutText</td>
                                            <td>@item.LunchInText</td>
                                            <td>@item.TotalLunchTime</td>
                                        </tr>
                                    }

                                }
                                else
                                {
                                 <tr class="text-center">
                                     <td colspan="7">No data available in table </td>
                                 </tr>   
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>
@code {
    private TimeSheetDTO model = new();
    private DateFilterRequest dateFilterRequest = new();
    private PdfResponse pdf = new();
    private PdfRequest pdfRequest = new();
    // private List<TimeSheetDTO> modelList = new();
    // private List<AttendanceDTO> attendances = new();
    // private AttendanceDTO attendanceList = new();

    protected override async Task OnInitializedAsync()
    {

        string? token = await localStorageService.GetItemAsStringAsync("auth")!;
        Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

        await LoadData();
    }

    private async Task LoadData()
    {
        model = await ReportsService.TimeSheetsAsync();
    }

    public async Task HandleValidSubmit()
    {

    }

    public async Task DateFilterAsync()
    {
        var param = new DateFilterRequest
            {
                DateFrom = model.DateFrom,
                DateTo = model.DateTo
            };
        model = await ReportsService.GetFilteredTimeSheetAsync(param);

    }

    public async Task ExportToPDF()
    {
        var req = new PdfRequest
            {
                DateFrom = model.DateFrom,
                DateTo = model.DateTo
            };
        pdf = await ReportsService.ExportToPDF(req);

        if (pdf.FileBytes != null && pdf.FileBytes.Length > 0)
        {
          

            string base64Data = Convert.ToBase64String(pdf.FileBytes);
            string base64Url = $"data:application/pdf;base64,{base64Data}";

            await JSRuntime.InvokeVoidAsync("downloadFile", "application/pdf", base64Data, pdf.Filename);
            toastService.ShowError("Report succesfully generated.");
        }
        else
        {
           
            toastService.ShowError("No report was generated.");
        }
    }


}
